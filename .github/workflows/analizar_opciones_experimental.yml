def main():
    group_type = os.getenv("GROUP_TYPE", "7magnificas")
    if group_type not in GROUPS_CONFIG:
        logger.error(f"Grupo {group_type} no encontrado")
        return

    group_config = GROUPS_CONFIG[group_type]
    tickers = group_config["tickers"]
    description = group_config["description"]
    webhook_url = group_config["webhook"]
    logger.info(f"Webhook URL para {description}: {webhook_url}")  # Añadimos este log para depuración

    all_options = []
    errors = []
    for ticker in tickers:
        try:
            options = analyze_ticker(ticker)
            all_options.extend(options)
        except Exception as e:
            errors.append(f"{ticker}: {str(e)}")

    if not all_options:
        logger.info("No se encontraron opciones que cumplan con los criterios.")
        return

    df = pd.DataFrame(all_options)
    df.to_csv("todas_las_opciones.csv", index=False)

    best_contracts = df.sort_values(by="annualized_return", ascending=False).head(DEFAULT_CONFIG["TOP_CONTRATOS"])
    best_contracts.to_csv("mejores_contratos.csv", index=False)

    stock = yf.Ticker(ticker)
    current_price = stock.info.get('regularMarketPrice', stock.info.get('previousClose', 0))
    min_52_week = stock.info.get('fiftyTwoWeekLow', 0)
    max_52_week = stock.info.get('fiftyTwoWeekHigh', 0)

    message = f"==================================================\n"
    message += f"{ticker} ({description})\n"
    message += f"==================================================\n\n"
    message += f"Precio: ${current_price:.2f}\n"
    message += f"Min 52s: ${min_52_week:.2f}\n"
    message += f"Max 52s: ${max_52_week:.2f}\n"
    message += f"{len(get_option_data_yahoo(ticker))} opciones de Yahoo para {ticker}\n"
    message += f"{len(get_option_data_finnhub(ticker))} opciones de Finnhub para {ticker}\n"
    message += f"Combinadas {len(all_options)} opciones para {ticker}\n"
    message += f"Fuentes: Yahoo Finance\n"
    message += f"Errores: {', '.join(errors) if errors else 'Ninguno'}\n"
    message += f"Resultados guardados.\n"

    with open("resultados.txt", "w") as f:
        f.write(message)

    if not best_contracts.empty:
        table = tabulate(best_contracts, headers="keys", tablefmt="pipe", showindex=False)
        with open("Mejores_Contratos.txt", "w") as f:
            f.write(table)
        message += f"\n**Mejores Contratos:**\n```\n{table}\n```"

    if DEFAULT_CONFIG["FORCE_DISCORD_NOTIFICATION"] or not best_contracts.empty:
        logger.debug(f"Enviando a {webhook_url} para {description}")
        send_discord_notification(message, webhook_url)
